* Lecture 1

  - *Computation*
    - Declarative knowledge
      - Tells you *what* something is, not *how* to do it
      - Closest it gets is allow us to *test* it

      e.g
      #+BEGIN_EXAMPLE
      \sqrt{x} is a number ~y~ s.t y^2 = x and y != 0
      #+END_EXAMPLE

    - Imperative knowledge
      - Tells us *how* to do something
      - A sequence of instructions to do something

      e.g
      #+BEGIN_EXAMPLE
      - Start with a guess ~g~
      - If g^2 = x, stop, return g
      - else g = (g + x/g) / 2
      - repeat
      #+END_EXAMPLE

    - *Computation* is about capturing the process of coming up with imperative process to do something
    - A computation is based on a fixed set of primitive which are used to create complex computation

  - *Programming language*
    - There is no best programming-language, but some languages are better at doing certain things than other languages
    - Language used in this course is python, but the course is not about Python. It is about how to program, Python is only a programming language choice and once we know to code in one language (Python in our case), we can learn a new language easily
    - Different dimensions of a language
      - High vs Low level

        Low level: Very close to hardware. Primitives are moving data from one location in memory to other High level: Much richer set of primitives

      - General vs targeted

        General: For general purpose programming. Can be used to do a lot of things e.g Python Targeted: Designed for a specific purpose, e.g Maths(Mat-lab)

      - Interpreted vs Compiled

        Interpreted: Interpreted work directly on source-code at run time Compiled: Compiler complies code to intermediate form (Object code) which actually runs finally

    - Python is
      - High level
      - General purpose
      - Interpreted
    - *Syntax of a language*

      What are the legal expressions in this language

    - *Static Semantics of a language

      says which programs are meaningful i.e which expressions make sense

    - *Semantics of a language

      says what a program means, i.e what happen when the program runs
* Lecture 2
  - /Operands/ and /operators/ make the expressions to do operations

  - Expressions can be typed directly in /interpreter/
    - Interpreter evaluate expressions and print
    - *Operator Overloading*
      - Same operator behaves differently with different types, e.g + (plus) operator will, perform arithmetic addition on two numbers, concatenate two strings
      - Multiplication between two integer, will return an interger value
        - But multiplication between integer and string, will return new string
      - Adding two string together, will combine that strings

     - Type checking in python
        - Cannot add interger value with string

          e.g
          #+BEGIN_SRC python
          3*4
          # 12

          3*'ab'
          # 'ababab'

          'a'+'bcd'
          #Joined two strings 'abcd'

          3+'ab'
          #Error because interger cannot join with string

          str(3)+'ab'
          # '3ab', str() is a type conversion
          #+END_SRC
        - /Type conversion/: Convert integer into string

  - *Operator precedence*
    - Operators have their priority order in which they operate
    - Exponentiation are done before multiplication or division are done before addition and subtraction
    - Expressions in parenthesis are done before multiplication (parenthesis are executed first)

      e.g
      #+BEGIN_SRC python
      3+4*5
      #Return 23, because multiplication done before addition

      (3+4)*5
      #Return 35, because addition under parentheses done before multiplication
      #+END_SRC

  - *Variables*
    - Variables are created using an assignment statement and they have there own values

      e.g
      #+BEGIN_SRC python
      x = 3
      #It assign integer value to variable x
      #+END_SRC

    - Assigning a variable gives it a data-type which is dynamically derived from its value

        e.g
        #+BEGIN_SRC python
        x = 3
        #x has integer value and type

        x = 'abc'
        #Now type of x is changed from integer to string
        #+END_SRC

  - *Statement*
    - Legal commands that python interpret: /print/, /assignment/
    - *Print* put it back out in the screen
    - *Assignmen* binding a name to a value

  - *Style*
    - Styles are very important in every programing language
    - It help to understand code easily
    - *Comment*: # (/HASH/) is using for comment section in python
      - Comments can help to find what is going on inside code
    - *Variable names*: Chosse variable names that make sense
      - It tells what is trying to capture inside variable

  - *Branching programs*: can change the order of instructions based on a test usually value of a variable
    - *if statement*: if test is true, then do set of things and if test is false then skip that step
    - *else statement*: if test is false then do this part

      Syntax
      #+BEGIN_EXAMPLE
      if <some text>:
         Block of instruction
      else:
         Block of instruction
      #+END_EXAMPLE

      e.g
      #+BEGIN_SRC python
      x = 15
      if (x/2)*2 == x:
         print 'Even'
      else: print 'Odd'
      #x is a variable which is having integer value 15
      #if condition is true do next thing after the colon
      #The sign '==' is comparing both sides
      #if condition false else will do next thing after the colon
      #+END_SRC

  - *Boolean Combination*: /and/, /or/, /not/
    - There are two types of Boolean is *True*, *False*
    - *AND*: if both arguments are true it's true
    - *OR*: if one argument true it's true
    - *NOT*: if argument is not true it's true

  - *Iteration or loops*: reuse same code over and over again
