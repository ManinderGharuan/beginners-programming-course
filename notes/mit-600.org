* Lecture 1

  - *Computation*
    - Declarative knowledge
      - Tells you *what* something is, not *how* to do it
      - Closest it gets is allow us to *test* it

      e.g
      #+BEGIN_EXAMPLE
      \sqrt{x} is a number ~y~ s.t y^2 = x and y != 0
      #+END_EXAMPLE

    - Imperative knowledge
      - Tells us *how* to do something
      - A sequence of instructions to do something

      e.g
      #+BEGIN_EXAMPLE
      - Start with a guess ~g~
      - If g^2 = x, stop, return g
      - else g = (g + x/g) / 2
      - repeat
      #+END_EXAMPLE

    - *Computation* is about capturing the process of coming up with imperative process to do something
    - A computation is based on a fixed set of primitive which are used to create complex computation

  - *Programming language*
    - There is no best programming-language, but some languages are better at doing certain things than other languages
    - Language used in this course is python, but the course is not about Python. It is about how to program, Python is only a programming language choice and once we know to code in one language (Python in our case), we can learn a new language easily
    - Different dimensions of a language
      - High vs Low level

        Low level: Very close to hardware. Primitives are moving data from one location in memory to other High level: Much richer set of primitives

      - General vs targeted

        General: For general purpose programming. Can be used to do a lot of things e.g Python Targeted: Designed for a specific purpose, e.g Maths(Mat-lab)

      - Interpreted vs Compiled

        Interpreted: Interpreted work directly on source-code at run time Compiled: Compiler complies code to intermediate form (Object code) which actually runs finally

    - Python is
      - High level
      - General purpose
      - Interpreted
    - *Syntax of a language*

      What are the legal expressions in this language

    - *Static Semantics of a language

      says which programs are meaningful i.e which expressions make sense

    - *Semantics of a language

      says what a program means, i.e what happen when the program runs
* Lecture 2
  - /Operands/ and /operators/ make the expressions to do operations

  - Expressions can be typed directly in /interpreter/
    - Interpreter evaluate expressions and print
    - *Operator Overloading*
      - Same operator behaves differently with different types, e.g + (plus) operator will, perform arithmetic addition on two numbers, concatenate two strings
      - Multiplication between two integer, will return an interger value
        - But multiplication between integer and string, will return new string
      - Adding two string together, will combine that strings

     - Type checking in python
        - Cannot add interger value with string

          e.g
          #+BEGIN_SRC python
          3*4
          # 12

          3*'ab'
          # 'ababab'

          'a'+'bcd'
          #Joined two strings 'abcd'

          3+'ab'
          #Error because interger cannot join with string

          str(3)+'ab'
          # '3ab', str() is a type conversion
          #+END_SRC
        - /Type conversion/: Convert integer into string

  - *Operator precedence*
    - Operators have their priority order in which they operate
    - Exponentiation are done before multiplication or division are done before addition and subtraction
    - Expressions in parenthesis are done before multiplication (parenthesis are executed first)

      e.g
      #+BEGIN_SRC python
      3+4*5
      #Return 23, because multiplication done before addition

      (3+4)*5
      #Return 35, because addition under parentheses done before multiplication
      #+END_SRC

  - *Variables*
    - Variables are created using an assignment statement and they have there own values

      e.g
      #+BEGIN_SRC python
      x = 3
      #It assign integer value to variable x
      #+END_SRC

    - Assigning a variable gives it a data-type which is dynamically derived from its value

        e.g
        #+BEGIN_SRC python
        x = 3
        #x has integer value and type

        x = 'abc'
        #Now type of x is changed from integer to string
        #+END_SRC

  - *Statement*
    - Legal commands that python interpret: /print/, /assignment/
    - *Print* put it back out in the screen
    - *Assignmen* binding a name to a value

  - *Style*
    - Styles are very important in every programing language
    - It help to understand code easily
    - *Comment*: # (/HASH/) is using for comment section in python
      - Comments can help to find what is going on inside code
    - *Variable names*: Chosse variable names that make sense
      - It tells what is trying to capture inside variable

  - *Branching programs*: can change the order of instructions based on a test usually value of a variable
    - *if statement*: if test is true, then do set of things and if test is false then skip that step
    - *else statement*: if test is false then do this part

      Syntax
      #+BEGIN_EXAMPLE
      if <some text>:
         Block of instruction
      else:
         Block of instruction
      #+END_EXAMPLE

      e.g
      #+BEGIN_SRC python
      x = 15
      if (x/2)*2 == x:
         print 'Even'
      else: print 'Odd'
      #x is a variable which is having integer value 15
      #if condition is true do next thing after the colon
      #The sign '==' is comparing both sides
      #if condition false else will do next thing after the colon
      #+END_SRC

  - *Boolean Combination*: /and/, /or/, /not/
    - There are two types of Boolean is *True*, *False*
    - *AND*: if both arguments are true it's true
    - *OR*: if one argument true it's true
    - *NOT*: if argument is not true it's true

  - *Iteration or loops*: reuse same code over and over again

* Lecture 3
-We have looked at three different kinds of things: /Data/, /Operations/ and /Statements/
  - *Data*:
    - We have done /numbers/, /strings/ and /Boolean/

  - *Operations*:
    - /Additions/ and /multiplications/
    - /and/, /or/

  - *Statements*:
    - /Assignment/
    - /input/output/ (e.g raw input for input and print for output)
    - /Branches/
    - /loop mechanisms/ (e.g while)

** Iterative programs
- Iterative is used to describe a situation in which a sequence of instructions can be executed multiple times
- Following are the steps
  - Choose a variable that count
  - Initialize outside the loop
  - Setup end test (variable)
  - Construct block
    - Change variable
  - What to do when done

- *Flow chart*
  - Flow chart is how to structure the code

#+BEGIN_SRC python
x = 16                #Initialize variable
ans = 0               #Variale that count
while ans*ans < x:    #Setup end test or condition
  ans = ans + 1       #Change variable
print ans             #Display 'ans' when done
#+END_SRC

Every looping construct should always be able to terminate and it should give a reasonable answer

** Defensive programming
 - Make sure there is no syntax error or any infinite loop
 - Always check user's input for mistakes

e.g
#+BEGIN_SRC python
x = 16
ans = 0
if x >= 0;
  while ans*ans < x:
    ans = ans + 1
  if ans*ans != x:
    print x, ' is not a perfect number'
  else: print ans
else: print x, ' is a negative number'
#+END_SRC

** Exhaustive enumeration
- Try all reasonable values until you find the solution

  e.g
  #+BEGIN_SRC python
  x = 10
  i = 1
  while i<x:
    if x%i == 0:
      print 'divisor ', i
    i = i + 1
  #+END_SRC

** For loop
- for loop updates the variable automatically
  - It allows to be sure that /For loop/ is going to terminate

  syntax
  #+BEGIN_EXAMPLE
  for <var> in <some collection>:
  block of code
  #+END_EXAMPLE
  Using that variable as placeholder have it walk through collection that starting at the first thing, execute that code, then next thing, execute that code, and so on

 e.g
#+BEGIN_SRC python
x = 10
for i in range(1, x):   #It gives all integer from 1 up to x
  if x%i == 0:
    print 'divide ', i
#+END_SRC

** Range
- Range is built-in python function
- It gives all the integers from lower to upper

  e.g
  #+BEGIN_SRC python
  range(1, 10)  #It gives integer from 1 to 10
  #1, 2, 3, 4, 5, 6, 7, 8, 9, 10
  #+END_SRC

** Tuple
- This is an ordered sequence of elements
- It is immutable
- Representation of tuple is parenthesis (i.e round bracket), followed by a sequence of element, separated by commas and followed by a close parenthesis bracket
  e.g t = (1, 2, 3, 4)
- *Selection* using to select the positions or index, e.g t[1]
- *Slicing* using to pick up pieces, e.g t[1:3]

e.g
#+BEGIN_SRC python
test = (1, 2, 3, 4)
test[0]
# 1

test[3]
# 4

test[-1]
# 4

test[1:3]
#(2, 3)
#+END_SRC

** String
- It is an ordered sequence of characters
- String also support selection and slicing
* Lecture 4
- *Decomposition*: is a way of putting structure onto the code (way of breaking the code up into modules)
- *Abstraction*: means to give names to things, so that name captures the core of what a function or whole program does (Abstraction is hiding details)

- *Functions*: Function is a block of organized, reusable code that is used to perform a single, related action
  - It break up into modules
  - Suppress detail
  - It creates new primitives

  Syntax:
    - *def* is a keyword (Definition or define)
      - It followed by name (This name is referred when we want to use this function)
      - Function name has open and close parenthesis with variable name inside it, i.e name(x)
      - *name(x)* defines formal parameters of function
    - *Specification* is /what/ does this function do
    - *return* (keyword)
    - Every possible path through code must end in a *return*

    e.g
    #+BEGIN_SRC python
      def sqrt(x):
        """Return the square root of x, if x is a perfect square.
             Prints an error message and returns None otherwise"""   #it is a specification
        ans = 0
        if x >= 0:
          while ans*ans < x: ans = ans + 1
          if ans*ans != x:
              print x, 'is not a perfect square'
              return None
          else: return ans
        else:
          print x, 'is a negative number'
          return None

       #sqrt(16)
       #It will display 4
    #+END_SRC

  - To call a function, pass in values for parameters in parenthesis next to function's name, i.e sqrt(16)
    - It binds x to 16 (this binding is local, it only holds within the confines of the code of this procedure)
    - Inside the function block every bindings are local
    - *Local bindings*: do not affect global bindings

- *Recursion*: Break the problem into simpler version of same problem, plus some steps to add their solutions to make solution of the whole program
  - Base case: It is the simplest possible solution to the problem
  - Inductive step (or recursive step) break the problem into a simpler version of the same problem and some other steps

  e.g
  #+BEGIN_SRC python
    def isPalindrome(s):
        """Returns True if s is a palindrome and False otherwise."""
        if len(s) <= 1: return True
        else: return s[0] == s[-1] and isPalindrome(s[1:-1])

    def isPalindrome1(s, indent):
        """Returns True if s is a palindrome and False otherwise"""
        print indent, 'isPalindrome called with', s
        if len(s) <= 1 :
            print index, 'About to return True from base case'
            return True
        else:
            ans = s[0] == s[-1] and isPalindrome1(s[1:-1], indent + indent)
            return ans
  #+END_SRC
* Lecture 5
- Computers are supposed to be good for crunching numbers

- Python has two different type of numbers
  - *int*
  - Python unlike some languages have arbitrary precision integers
  - *float*
    - IEEE 754 (Floating point)
      - Variant of scientific notation
      - /Mantissa and exponent/: Represent a floating point number as pair of mantissa and an exponent
        - Mantissa is between one and two (i.e 1 <= mantissa < 2)
        - Exponent is in the range, -1022 to +1023
- In python to display something, it uses the built-in function repr (i.e repr())
  - *Representation*: (repr()) converts a number to a string and then display that string
  - In *floats* it rounds it to seventeen (17) digits

    e.g
    #+BEGIN_SRC python
    x = 0.1
    x
    #It will display 0.10000000000000001
    #+END_SRC

- *Successive approximation* has rough structure
  #+BEGIN_EXAMPLE
  guess = initial guess
  for item in range(100):
    if f(guess) close enough: return guess
    else: guess = better guess
  #+END_EXAMPLE

- *Bisection method* is a root-finding method

* Lecture 6

** Bisection method
- It is related to binary search
- It finds the square root
  - The basic idea that we had some sort of a line and the answer was somewhere between that line
    - This is a kind of recursive thinking

e.g
#+BEGIN_SRC python  def squareRootBi(x, epsilon):
      """Assumes x >= 0 and epsilon > 0
         Return y s_t. y*y is within epsilon of x"""
      assert x >= 0, 'x must be non-negative, not' + str(x)
      assert epsilon > 0, 'epsilon must be positive, not' + str(epsilon)
      low = 0
      high = x
      guess = (low + high)/2.0
      ctr = 1
      while abs(guess**2 - x) > epsilon and ctr <= 100:
          if guess**2 < x:
              low = guess
          else:
              high = guess
          guess = (low + high)/2.0
          ctr += 1
      assert ctr <= 100, 'Iteration count exceeded'
      print 'Bi method. Num. iterations:', ctr, 'Estimate', guess
      return guess

  def testBi():
      print '  squareRoot(4, 0.0001)'
      squareRootBi(4, 0.0001)
      print '  squareRoot(9, 0.0001)'
      squareRootBi(9, 0.0001)
#+END_SRC

- *Assert statements*: is expecting to always be true at that point in the code, if it is false at run time, an assertion failure results, which typically causes the program to crash
- *Regression testing*: is done to make sure that old code still works once the new code changes are done

** Non-scalar
- We have done two non-scalar types: *Tuples* and *Strings*
- Tuples and strings are immutable
- *Mutable types*: Things which can change (i.e lists)

** List
*Lists*: different from string in two ways
  - It is mutable
  - The values need not be characters (They can be number, characters, strings and can other lists)
  - e.g: techs = ['MIT', 'cal tech'] (It takes variable techs and it makes point to a list with two items in it: 'MIT' and 'cal tech'
  - *append* is method using to add new item in list

    e.g
    #+BEGIN_SRC python
      univs = []  # This is an empty list
      univs.append('teach') # Now new string teach is added in list

      # It can append another list inside list
      teachs = ['MIT', 'python']
      test = []
      test.append(teachs) # It will add teachs list inside test list (i.e [['MIT', 'python]])

      # We can also add two lists inside list
      learn = ['git', 'coding']
      test.append(learn) # Now test = (equals to) [['MIT', 'python'], ['git', 'coding']]
    #+END_SRC

  - We can iterate any list with for loop

    e.g
    #+BEGIN_SRC python
      teachs = ['MIT', 'python']
      learn = ['git', 'coding']
      test = []

      test.append(teachs)
      test.append(learn)

      for i in test:
          print i
          for e in i:
              print e

      # ['MIT', 'python']
      # Mit
      # python
      # ['git', 'coding']
      # git
      # coding
    #+END_SRC

  - *remove*: is the list method used to remove object from the list
    - It takes two arguments list name and value which want to remove (e.g learn.remove('coding'))
      - It will search through the list until first time it finds value and then it will remove it from list
* Lecture 7
** List
- We have done two methods *append* and *remove*
- *Assign to a list*
  - We can also assign to a list or to an element of list (e.g ls[1] = 44

    e.g
    #+BEGIN_SRC python
      ls = ['element', 'number', 5, 4, 'anything']
      ls[3] = 'replaced'  #ls[3], 3 is index of list
      #Now new list `ls` is ['element', 'number', 5, 'replaced', 'anything']
    #+END_SRC

** Dictionaries
- Dictionaries are also /mutable/ and /heterogeneous/ like lists are (but elements in lists have an order, dictionary don't)
- Every element of a dictionary as a key value pair(i.e <key>: <value>), where the keys are used as indices

e.g
#+BEGIN_SRC python
dic = {'name': 'john', 'lecture': 7, 'course': 'MIT', 1: 'one'}
#+END_SRC

- Dictionaries are implemented using a technique called *Hashing*
  - It allows us to retrieve keys in constant time

** Pseudo code
- Pseudo is description of steps, but not in a particular programming language

** Efficiency
- Orders of growth
- Choice of algorithm

* Lecture 8
- Canonical algorithms and different class of complexity
- Iterative exponentiation
- Rate of growth as the size of the of problem growth
  - *Asymptotic notation*: are languages that allow us to analyze an algorithm's running time by identifying its behavior as input size for the algorithm increases (Also known as algorithm's growth rate)
  - *Big oh notation*: Upper limit to the growth of a function as the input gets large
    e.g: f of x is in big oh of n squared ( i.e f(x)eOn2 ) It says that function, f of x, is bounded above, there is upper limit on it, that growth no faster than quadratic in n squared
- *Linear algorithm* tend to be things where, at one pass-through, to reduce the problem by constant amount, by one
- *Log algorithm* typically is one where you cut the size of the problem down by some multiplicative factor
- These are orders of growth (e.g A quadratic algorithm could run faster than a linear algorithm, It depends on what the input is or what the particular cases are)
** Summary
- Recognize different classes of algorithm
- We have seen log, linear, quadratic, exponential
* Lecture 9
- There are shorting algorithms: *Selection sort*, *Bubble sort*
** Selection Sort
- First find the smallest element in the array and exchanges (or swap) it with the element in the first position
  - Then find second smallest element and exchange it with the element in the second position, and continues until the list is sorted
- Selection sort sorting list number of element - 1 (n-1) times

e.g
#+BEGIN_EXAMPLE
Unshorted list = [5, 2, 7, 8, 6]
Now search for smallest element and exchange it with first element

After that new list is = [2, 5, 7, 8, 6]
Now again search for second smallest element and exchange it with second element

After that new list is = [2, 5, 7, 8, 6]
There is no change because element in second no is already sorted

Now do same for third smallest element

New list = [2, 5, 6, 8, 7]

Again same step
After that new shorted list is [2, 5, 6, 7, 8]

Hence list is shorted
#+END_EXAMPLE
** Bubble Sort
- It compare each pair of adjacent items and swapping them if they are in wrong order
  - Passing procedure is repeated until no swap are required

e.g
#+BEGIN_EXAMPLE
Unshorted list = [5, 2, 7, 8, 6]

It checks first two element (5 and 2) and if needed to short then swap them (e.g [2, 5, 7, 8, 6]
Now again check second element and third element (5, 7) if needed swap them

When all passes done new list is = [2, 5, 7, 6, 8]

Now step 2 again starting from first two element until all passes done

Step 2 list = [2, 5, 6, 7, 8]

Now list is sorted but there are n-1 steps, so there are 5-1 = 4 steps
After all steps list will be sorted
#+END_EXAMPLE
