* DONE Recursion
CLOSED: [2017-01-02 Mon 13:23]

** DONE Length
CLOSED: [2017-01-05 Thu 13:58]
- [X] Base case
  - If list is empty return 0
- [X] Recursive case
  - Return 1 + length(list of one less)

** DONE Total
CLOSED: [2017-01-05 Thu 13:58]
- [X] Base case
  - If list is empty return 0
- [X] Recursive case
  - Return zeroth item of list + length(list of one less)

** DONE Factorial
CLOSED: [2017-01-05 Thu 13:58]
- [X] Base case
  - If number less than equal to 0 return 0
- [X] Recursive case
  - Return number * number - 1

** DONE Is Palindrome
CLOSED: [2017-01-05 Thu 13:58]
- [X] Base case
  - If string is empty return True
  - If string is having one character True
- [X] Recursive case
  - Return first item of string == last item of string and is_palindrome(string[1:-1])

** DONE Binary Search
CLOSED: [2017-01-05 Thu 13:58]
- [X] Base case
  - If list is empty return False
  - If middle of list equal to number return True
- [X] Recursive case
  - If middle of list less than number
    - return binary_search(number, ls[:(length of list)/2])
  - else: return binary_search(number, ls[(length of list)/2:])

** DONE Fibonacci
CLOSED: [2017-01-05 Thu 13:59]
- [X] Base case
  - If number is 0 return 0
  - If number is 1 return 1
- [X] Recursive case
  - fibonacci(n-2) + fibonacci(n-1
* DONE Algorithms
CLOSED: [2017-01-05 Thu 19:15]
** DONE Selection sort
CLOSED: [2017-01-05 Thu 17:33]
*** Search min index
**** Algorithm
- Compare list[i] with min
- If list[i] > min return index
  - else min = list[i] and index = i
**** Pseudo code
- count = 1
- min = ls[0]
- min_index = 0
- while count < Len(ls):
  - if min < ls[count]:
    - min = ls[count]
    - min_index = count
- return min_index
*** Algorithm
- Search smallest element in list
- Swap searched element with index 0 of list
- Search second smallest element
- Swap searched element with index 1 of list
- Repeat same steps while index equal to length of list - 1
*** Pseudo code
- [X] Base case
  - If length of list <= 1: return ls
- [X] Recursive case
  - min_index = get_min_index(ls)
  - list[0], list[min_index] = list[min_index], list[0]
  - Return [list[0]] + selection_sort(ls[1:])

** DONE Bubble sort
CLOSED: [2017-01-05 Thu 19:15]
*** Algorithm
- Start comparing from first two elements
- If first element is greater than second element swap first with second
  - Repeat this for all items of list
- Repeat above steps until there are no swaps to do
*** Pseudo code
- [X] Base case
  - if not have_changed: return list
  - if len(list) <= 1: return list
  - for i in range(len(ls)-1):if ith element less than ith + 1 element swap them
- [X] Recursive case
  - bubble_sort(ls, have_changed)
